/* tslint:disable */
/* eslint-disable */
/**
 * Token Tracker Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  TokenTrackerAdjustTokenBalanceRequest,
  TokentrackerAdjustTokenBalanceResponse,
  TokentrackerGetTokenBalanceResponse,
  TokentrackerStripeWebhookRequest,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TokenTrackerAdjustTokenBalanceRequestFromJSON,
    TokenTrackerAdjustTokenBalanceRequestToJSON,
    TokentrackerAdjustTokenBalanceResponseFromJSON,
    TokentrackerAdjustTokenBalanceResponseToJSON,
    TokentrackerGetTokenBalanceResponseFromJSON,
    TokentrackerGetTokenBalanceResponseToJSON,
    TokentrackerStripeWebhookRequestFromJSON,
    TokentrackerStripeWebhookRequestToJSON,
} from '../models/index';

export interface TokenTrackerAdjustTokenBalanceOperationRequest {
    tenantId: string;
    body: TokenTrackerAdjustTokenBalanceRequest;
}

export interface TokenTrackerGetTokenBalanceRequest {
    tenantId: string;
    body: object;
}

export interface TokenTrackerStripeWebhookRequest {
    body: TokentrackerStripeWebhookRequest;
}

/**
 * 
 */
export class TokenTrackerApi extends runtime.BaseAPI {

    /**
     * Adjust token balance
     * AdjustTokenBalance
     */
    async tokenTrackerAdjustTokenBalanceRaw(requestParameters: TokenTrackerAdjustTokenBalanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokentrackerAdjustTokenBalanceResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling tokenTrackerAdjustTokenBalance.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling tokenTrackerAdjustTokenBalance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/v1/{tenantId}/adjust_token_balance`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenTrackerAdjustTokenBalanceRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokentrackerAdjustTokenBalanceResponseFromJSON(jsonValue));
    }

    /**
     * Adjust token balance
     * AdjustTokenBalance
     */
    async tokenTrackerAdjustTokenBalance(requestParameters: TokenTrackerAdjustTokenBalanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokentrackerAdjustTokenBalanceResponse> {
        const response = await this.tokenTrackerAdjustTokenBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get token balance
     * GetTokenBalance
     */
    async tokenTrackerGetTokenBalanceRaw(requestParameters: TokenTrackerGetTokenBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokentrackerGetTokenBalanceResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling tokenTrackerGetTokenBalance.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling tokenTrackerGetTokenBalance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/v1/{tenantId}/get_token_balance`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokentrackerGetTokenBalanceResponseFromJSON(jsonValue));
    }

    /**
     * Get token balance
     * GetTokenBalance
     */
    async tokenTrackerGetTokenBalance(requestParameters: TokenTrackerGetTokenBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokentrackerGetTokenBalanceResponse> {
        const response = await this.tokenTrackerGetTokenBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stripe webhook
     * StripeWebhook
     */
    async tokenTrackerStripeWebhookRaw(requestParameters: TokenTrackerStripeWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling tokenTrackerStripeWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("standardAuthorization", []);
        }

        const response = await this.request({
            path: `/v1/stripe/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokentrackerStripeWebhookRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Stripe webhook
     * StripeWebhook
     */
    async tokenTrackerStripeWebhook(requestParameters: TokenTrackerStripeWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tokenTrackerStripeWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
