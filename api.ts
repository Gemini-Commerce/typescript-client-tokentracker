/* tslint:disable */
/* eslint-disable */
/**
 * Token Tracker Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the `Value` type union.   The JSON representation for `NullValue` is JSON `null`.   - NULL_VALUE: Null value.
 * @export
 * @enum {string}
 */

export const ProtobufNullValue = {
    NullValue: 'NULL_VALUE'
} as const;

export type ProtobufNullValue = typeof ProtobufNullValue[keyof typeof ProtobufNullValue];


/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface StripeEventData
 */
export interface StripeEventData {
    /**
     * 
     * @type {object}
     * @memberof StripeEventData
     */
    'object'?: object;
    /**
     * 
     * @type {object}
     * @memberof StripeEventData
     */
    'previousAttributes'?: object;
    /**
     * 
     * @type {string}
     * @memberof StripeEventData
     */
    'raw'?: string;
}
/**
 * 
 * @export
 * @interface StripeEventRequest
 */
export interface StripeEventRequest {
    /**
     * 
     * @type {string}
     * @memberof StripeEventRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StripeEventRequest
     */
    'idempotencyKey'?: string;
}
/**
 * 
 * @export
 * @interface TokenTrackerAdjustTokenBalanceRequest
 */
export interface TokenTrackerAdjustTokenBalanceRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenTrackerAdjustTokenBalanceRequest
     */
    'amount'?: string;
}
/**
 * 
 * @export
 * @interface TokentrackerAdjustTokenBalanceResponse
 */
export interface TokentrackerAdjustTokenBalanceResponse {
    /**
     * 
     * @type {string}
     * @memberof TokentrackerAdjustTokenBalanceResponse
     */
    'newBalance'?: string;
}
/**
 * 
 * @export
 * @interface TokentrackerGetTokenBalanceResponse
 */
export interface TokentrackerGetTokenBalanceResponse {
    /**
     * 
     * @type {string}
     * @memberof TokentrackerGetTokenBalanceResponse
     */
    'balance'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokentrackerGetTokenBalanceResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TokentrackerStripeWebhookRequest
 */
export interface TokentrackerStripeWebhookRequest {
    /**
     * 
     * @type {StripeEventData}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'data'?: StripeEventData;
    /**
     * 
     * @type {string}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'account'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'apiVersion'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'livemode'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'object'?: string;
    /**
     * 
     * @type {string}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'pendingWebhooks'?: string;
    /**
     * 
     * @type {StripeEventRequest}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'request'?: StripeEventRequest;
    /**
     * 
     * @type {string}
     * @memberof TokentrackerStripeWebhookRequest
     */
    'type'?: string;
}

/**
 * TokenTrackerApi - axios parameter creator
 * @export
 */
export const TokenTrackerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adjust token balance
         * @summary AdjustTokenBalance
         * @param {string} tenantId 
         * @param {TokenTrackerAdjustTokenBalanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenTrackerAdjustTokenBalance: async (tenantId: string, body: TokenTrackerAdjustTokenBalanceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('tokenTrackerAdjustTokenBalance', 'tenantId', tenantId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tokenTrackerAdjustTokenBalance', 'body', body)
            const localVarPath = `/v1/{tenantId}/adjust_token_balance`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get token balance
         * @summary GetTokenBalance
         * @param {string} tenantId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenTrackerGetTokenBalance: async (tenantId: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('tokenTrackerGetTokenBalance', 'tenantId', tenantId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tokenTrackerGetTokenBalance', 'body', body)
            const localVarPath = `/v1/{tenantId}/get_token_balance`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stripe webhook
         * @summary StripeWebhook
         * @param {TokentrackerStripeWebhookRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenTrackerStripeWebhook: async (body: TokentrackerStripeWebhookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tokenTrackerStripeWebhook', 'body', body)
            const localVarPath = `/v1/stripe/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication standardAuthorization required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "standardAuthorization", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenTrackerApi - functional programming interface
 * @export
 */
export const TokenTrackerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenTrackerApiAxiosParamCreator(configuration)
    return {
        /**
         * Adjust token balance
         * @summary AdjustTokenBalance
         * @param {string} tenantId 
         * @param {TokenTrackerAdjustTokenBalanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenTrackerAdjustTokenBalance(tenantId: string, body: TokenTrackerAdjustTokenBalanceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokentrackerAdjustTokenBalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenTrackerAdjustTokenBalance(tenantId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokenTrackerApi.tokenTrackerAdjustTokenBalance']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get token balance
         * @summary GetTokenBalance
         * @param {string} tenantId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenTrackerGetTokenBalance(tenantId: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokentrackerGetTokenBalanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenTrackerGetTokenBalance(tenantId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokenTrackerApi.tokenTrackerGetTokenBalance']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Stripe webhook
         * @summary StripeWebhook
         * @param {TokentrackerStripeWebhookRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenTrackerStripeWebhook(body: TokentrackerStripeWebhookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenTrackerStripeWebhook(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TokenTrackerApi.tokenTrackerStripeWebhook']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TokenTrackerApi - factory interface
 * @export
 */
export const TokenTrackerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenTrackerApiFp(configuration)
    return {
        /**
         * Adjust token balance
         * @summary AdjustTokenBalance
         * @param {string} tenantId 
         * @param {TokenTrackerAdjustTokenBalanceRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenTrackerAdjustTokenBalance(tenantId: string, body: TokenTrackerAdjustTokenBalanceRequest, options?: any): AxiosPromise<TokentrackerAdjustTokenBalanceResponse> {
            return localVarFp.tokenTrackerAdjustTokenBalance(tenantId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get token balance
         * @summary GetTokenBalance
         * @param {string} tenantId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenTrackerGetTokenBalance(tenantId: string, body: object, options?: any): AxiosPromise<TokentrackerGetTokenBalanceResponse> {
            return localVarFp.tokenTrackerGetTokenBalance(tenantId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Stripe webhook
         * @summary StripeWebhook
         * @param {TokentrackerStripeWebhookRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenTrackerStripeWebhook(body: TokentrackerStripeWebhookRequest, options?: any): AxiosPromise<object> {
            return localVarFp.tokenTrackerStripeWebhook(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokenTrackerApi - object-oriented interface
 * @export
 * @class TokenTrackerApi
 * @extends {BaseAPI}
 */
export class TokenTrackerApi extends BaseAPI {
    /**
     * Adjust token balance
     * @summary AdjustTokenBalance
     * @param {string} tenantId 
     * @param {TokenTrackerAdjustTokenBalanceRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenTrackerApi
     */
    public tokenTrackerAdjustTokenBalance(tenantId: string, body: TokenTrackerAdjustTokenBalanceRequest, options?: RawAxiosRequestConfig) {
        return TokenTrackerApiFp(this.configuration).tokenTrackerAdjustTokenBalance(tenantId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get token balance
     * @summary GetTokenBalance
     * @param {string} tenantId 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenTrackerApi
     */
    public tokenTrackerGetTokenBalance(tenantId: string, body: object, options?: RawAxiosRequestConfig) {
        return TokenTrackerApiFp(this.configuration).tokenTrackerGetTokenBalance(tenantId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stripe webhook
     * @summary StripeWebhook
     * @param {TokentrackerStripeWebhookRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenTrackerApi
     */
    public tokenTrackerStripeWebhook(body: TokentrackerStripeWebhookRequest, options?: RawAxiosRequestConfig) {
        return TokenTrackerApiFp(this.configuration).tokenTrackerStripeWebhook(body, options).then((request) => request(this.axios, this.basePath));
    }
}



